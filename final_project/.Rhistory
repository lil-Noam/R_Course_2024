top_n = function(linear_model, df, num_features) {
result = feature_importance(linear_model)
top = feature_selection(result$coef, num_features)
n_movies = sub("Moviemov", "mov", top$Movie)
df_n = df[df$Movie %in% n_movies, ]
logistic_model = glmer(event_memory ~ MEGA_score + (1 | Subject), family = binomial, data = df_n)
return(logistic_analysis(logistic_model, df_n))
}
top5 = top_n(linear_model, df, 5)
top_n = function(linear_model, df, num_features) {
result = feature_importance(linear_model)
top = feature_selection(result$coef, num_features)
n_movies = sub("Moviemov", "mov", top$Movie)
df_n = df[df$Movie %in% n_movies, ]
logistic_model = glmer(event_memory ~ MEGA_score + (1 | Subject), family = binomial, data = df_n)
analysis = logistic_analysis(logistic_model, df_n)
return(list(analysis$ROC_Plot, analysis$Logistic_Plot))
}
top5 = top_n(linear_model, df, 5)
library(caret)
# Train a model and perform RFE (Recursive Feature Elimination)
rfe_model <- rfe(df[, 8:length(df)], df$event_memory,
sizes = c(1:5),  # specify the number of features to evaluate
rfeControl = rfeControl(functions = rfFuncs, method = "cv"))
print(rfe_model)
top5 = top_n(linear_model, df, 5)
top5
logistic_analysis = function(model, data, outcome_var = "event_memory", predictor_var = "MEGA_score", file_prefix = "Logistic_Analysis") {
# Generate predicted probabilities (fixed effects only and full prediction)
pred_prob_fixed = predict(model, type = "response", re.form = NA)  # Fixed effects only
pred_prob_full = predict(model, type = "response")  # Fixed + Random effects
# Compute and plot the ROC curve
roc_curve = roc(data[[outcome_var]], pred_prob_full)
roc_plot = plot(roc_curve, main = "ROC Curve for Logistic Regression Model", col = "blue", lwd = 2)
# Calculate AUC value and add to the plot
auc_value = auc(roc_curve)
text(0.6, 0.2, paste("AUC =", round(auc_value, 3)), col = "red", cex = 1.5)
# Print AUC value to console
print(paste("AUC:", auc_value))
# Store predicted probabilities in the data frame
data$pred_prob_fixed = pred_prob_fixed
data$pred_prob_full = pred_prob_full
# Plot the logistic regression: Predicted probabilities vs predictor (e.g., MEGA_score)
log_plot = ggplot(data, aes_string(x = predictor_var)) +
# Show the individual data points (raw data), colored by the actual event memory outcome (0 or 1)
geom_point(aes(y = pred_prob_full, color = as.factor(.data[[outcome_var]])), alpha = 0.7, size=2) +
# Plot the fixed effect line (general trend of predictor on predicted probability)
geom_line(aes(y = pred_prob_fixed), color = "blue", size = 1) +
labs(title = paste("Logistic Regression: Predicted Probability vs", predictor_var),
x = predictor_var, y = "Predicted Probability of Memory",
color = "Event Memory") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_color_manual(values = c("No" = "red", "Yes" = "green"))
# Return the plots
return(list(ROC_Plot = roc_plot, Logistic_Plot = log_plot))
}
top_n = function(linear_model, df, num_features) {
result = feature_importance(linear_model)
top = feature_selection(result$coef, num_features)
n_movies = sub("Moviemov", "mov", top$Movie)
df_n = df[df$Movie %in% n_movies, ]
logistic_model = glmer(event_memory ~ MEGA_score + (1 | Subject), family = binomial, data = df_n)
analysis = logistic_analysis(logistic_model, df_n)
return(list(ROC = analysis$ROC_Plot, Log = analysis$Logistic_Plot))
}
top5 = top_n(linear_model, df, 5)
top5
top10
top10 = top_n(linear_model, df, 10)
top10
top15 = top_n(linear_model, df, 15)
top15
top12 = top_n(linear_model, df, 12)
top12
top11 = top_n(linear_model, df, 11)
top11
top3 = top_n(linear_model, df, 3)
top5 = top_n(linear_model, df, 5)
top5
top3 = top_n(linear_model, df, 3)
top3
top5
source("~/GitHub/R_Course_2024/final_project/preprocess_EDA.R", echo=TRUE)
source("~/GitHub/R_Course_2024/final_project/analysis.R", echo=TRUE)
# Logistic regression model for memory by MEGA score
logistic_model = glmer(event_memory ~ MEGA_score + (1|Subject), family = binomial, data = df)
log_result = logistic_analysis(logistic_model, df)
print(log_result$ROC_Plot)
print(log_result$Logistic_Plot)
# linear regression for (MEGA_memory = MEGA Z score x event memory effect coding) by movie
# I first tried mixed model with random intercept for each subject
# but the sd was so small that I decided to switch back
linear_model = lm(MEGA_memory ~ Movie -1, data = df)
result = feature_importance(linear_model)
print(result$plot)
ggsave("feature_importance.jpeg", plot = result$plot, width = 12, height = 10, dpi = 300)
source("~/GitHub/R_Course_2024/final_project/top_features_modeling.R", echo=TRUE)
top4 = top_n(linear_model, df, 4)
top3 = top_n(linear_model, df, 3)
top4 = top_n(linear_model, df, 4)
top5 = top_n(linear_model, df, 5)
top10 = top_n(linear_model, df, 10)
top3
top3
top5
top10
top5
top10
top5
# Logistic regression model for memory by MEGA score
logistic_model = glmer(event_memory ~ MEGA_Z + (1|Subject), family = binomial, data = df)
log_result = logistic_analysis(logistic_model, df)
print(log_result$ROC_Plot)
print(log_result$Logistic_Plot)
# Save the ROC plot to a file
jpeg("ROC_curve.jpeg", width = 10, height = 10, units = "in", res = 300)
plot(log_result$ROC_Plot, main = "ROC Curve for Logistic Regression Model", col = "blue", lwd = 2)
text(0.6, 0.2, paste("AUC =", round(auc(log_result$ROC_Plot), 3)), col = "red", cex = 1.5)
dev.off()  # Close the file device and save the plot
# Save the logit curve to a file
ggsave("LogPlot.jpeg", plot = log_result$Logistic_Plot, width = 14, height = 10, dpi = 300)
# Logistic regression model for memory by MEGA score
logistic_model = glmer(event_memory ~ MEGA_score + (1|Subject), family = binomial, data = df)
log_result = logistic_analysis(logistic_model, df)
print(log_result$ROC_Plot)
print(log_result$Logistic_Plot)
# Save the ROC plot to a file
jpeg("ROC_curve.jpeg", width = 10, height = 10, units = "in", res = 300)
plot(log_result$ROC_Plot, main = "ROC Curve for Logistic Regression Model", col = "blue", lwd = 2)
text(0.6, 0.2, paste("AUC =", round(auc(log_result$ROC_Plot), 3)), col = "red", cex = 1.5)
dev.off()  # Close the file device and save the plot
# Save the logit curve to a file
ggsave("LogPlot.jpeg", plot = log_result$Logistic_Plot, width = 14, height = 10, dpi = 300)
top_n = function(linear_model, df, num_features) {
result = feature_importance(linear_model)
top = feature_selection(result$coef, num_features)
n_movies = sub("Moviemov", "mov", top$Movie)
df_n = df[df$Movie %in% n_movies, ]
logistic_model = glmer(event_memory ~ MEGA_Z + (1 | Subject), family = binomial, data = df_n)
analysis = logistic_analysis(logistic_model, df_n)
return(list(ROC = analysis$ROC_Plot, Log = analysis$Logistic_Plot))
}
top3 = top_n(linear_model, df, 3)
top3
top5 = top_n(linear_model, df, 5)
top5
top10 = top_n(linear_model, df, 10)
top10
source("~/GitHub/R_Course_2024/final_project/analysis.R", echo=TRUE)
top_n = function(linear_model, df, num_features) {
result = feature_importance(linear_model)
top = feature_selection(result$coef, num_features)
n_movies = sub("Moviemov", "mov", top$Movie)
df_n = df[df$Movie %in% n_movies, ]
logistic_model = glmer(event_memory ~ MEGA_Z + (1 | Subject), family = binomial, data = df_n)
analysis = logistic_analysis(logistic_model, df_n)
return(list(ROC = analysis$ROC_Plot, Log = analysis$Logistic_Plot))
}
top3 = top_n(linear_model, df, 3)
top3
top5 = top_n(linear_model, df, 5)
top5
top10 = top_n(linear_model, df, 10)
top10
chr(14)
str(14)
str(top3)
deparse(substitute(top3))
name = deparse(substitute(result))
name
paste0(name, "_ROC_curve.jpeg")
source("~/GitHub/R_Course_2024/final_project/preprocess_EDA.R", echo=TRUE)
source("~/GitHub/R_Course_2024/final_project/analysis.R", echo=TRUE)
source("~/GitHub/R_Course_2024/final_project/analysis.R", echo=TRUE)
source("~/GitHub/R_Course_2024/final_project/top_features_modeling.R", echo=TRUE)
save_roc = function(result){
name = deparse(substitute(result))
jpeg(paste0(name, "_ROC_curve.jpeg"), width = 10, height = 10, units = "in", res = 300)
plot(result$ROC_Plot, main = paste0("ROC Curve for Logistic Regression Model ",name), col = "blue", lwd = 2)
text(0.6, 0.2, paste("AUC =", round(auc(result$ROC_Plot), 3)), col = "red", cex = 1.5)
dev.off()  # Close the file device and save the plot
}
save_roc(log_result)
save_roc(top3)
summary(top3)
any(is.na(top3))  # Check for NAs
any(is.infinite(top3))  # Check for infinite values
summary(top3$ROC)
any(is.na(top3$ROC))  # Check for NAs
any(is.infinite(top3$ROC))  # Check for infinite values
save_roc(top3)
save_roc = function(result){
name = deparse(substitute(result))
jpeg(paste0(name, "_ROC_curve.jpeg"), width = 10, height = 10, units = "in", res = 300)
plot(result$ROC_Plot, main = paste0("ROC Curve for Logistic Regression Model ",name), col = "blue", lwd = 2, xlim=c(1,0))
text(0.6, 0.2, paste("AUC =", round(auc(result$ROC_Plot), 3)), col = "red", cex = 1.5)
dev.off()  # Close the file device and save the plot
}
save_roc(log_result)
save_roc(top3)
save_roc = function(result){
name = deparse(substitute(result))
jpeg(paste0(name, "_ROC_curve.jpeg"), width = 10, height = 10, units = "in", res = 300)
plot(result$ROC_Plot, main = paste0("ROC Curve for Logistic Regression Model ",name), col = "blue", lwd = 2, xlim=c(1,0), ylim=c(0,1))
text(0.6, 0.2, paste("AUC =", round(auc(result$ROC_Plot), 3)), col = "red", cex = 1.5)
dev.off()  # Close the file device and save the plot
}
save_roc(top3)
top3
top3 = top_n(linear_model, df, 3)
save_roc(top3)
top3
View(top3)
top3$ROC
top3$Log
print(top3$Log)
top_n = function(linear_model, df, num_features) {
result = feature_importance(linear_model)
top = feature_selection(result$coef, num_features)
n_movies = sub("Moviemov", "mov", top$Movie)
df_n = df[df$Movie %in% n_movies, ]
logistic_model = glmer(event_memory ~ MEGA_Z + (1 | Subject), family = binomial, data = df_n)
analysis = logistic_analysis(logistic_model, df_n)
return(list(ROC = analysis$ROC_Plot, Log = analysis$Logistic_Plot))
}
top3 = top_n(linear_model, df, 3)
save_roc(top3)
View(top3)
save_roc = function(result) {
name = deparse(substitute(result))
roc_plot = result$ROC_Plot
jpeg(paste0(name, "_ROC_curve.jpeg"), width = 10, height = 10, units = "in", res = 300)
plot(roc_plot, main = paste0("ROC Curve for Logistic Regression Model: ", name), col = "blue", lwd = 2, xlim = c(0, 1), ylim = c(0, 1))
text(0.6, 0.2, paste("AUC =", round(auc(result$ROC_Plot), 3)), col = "red", cex = 1.5)
dev.off()
}
logistic_model = glmer(event_memory ~ MEGA_Z + (1|Subject), family = binomial, data = df)
log_result = logistic_analysis(logistic_model, df)
print(log_result$ROC_Plot)
print(log_result$Logistic_Plot)
# Save the ROC plot to a file
save_roc(log_result)
top_n = function(linear_model, df, num_features) {
result = feature_importance(linear_model)
top = feature_selection(result$coef, num_features)
n_movies = sub("Moviemov", "mov", top$Movie)
df_n = df[df$Movie %in% n_movies, ]
logistic_model = glmer(event_memory ~ MEGA_Z + (1 | Subject), family = binomial, data = df_n)
analysis = logistic_analysis(logistic_model, df_n)
return(list(ROC = analysis$ROC_Plot, Log = analysis$Logistic_Plot))
}
top3 = top_n(linear_model, df, 3)
save_roc(top3)
top5 = top_n(linear_model, df, 5)
top10 = top_n(linear_model, df, 10)
save_roc(top5)
save_roc(top10)
print(result$ROC_Plot)
top_n = function(linear_model, df, num_features) {
result = feature_importance(linear_model)
top = feature_selection(result$coef, num_features)
n_movies = sub("Moviemov", "mov", top$Movie)
df_n = df[df$Movie %in% n_movies, ]
logistic_model = glmer(event_memory ~ MEGA_Z + (1 | Subject), family = binomial, data = df_n)
analysis = logistic_analysis(logistic_model, df_n)
return(df_n)
#list(ROC = analysis$ROC_Plot, Log = analysis$Logistic_Plot))
}
top3
top3 = top_n(linear_model, df, 3)
top3
top_n = function(linear_model, df, num_features) {
result = feature_importance(linear_model)
top = feature_selection(result$coef, num_features)
n_movies = sub("Moviemov", "mov", top$Movie)
df_n = df[df$Movie %in% n_movies, ]
# Check if df_n is non-empty and contains necessary columns
if (nrow(df_n) == 0) {
stop("Filtered data is empty. Check your movie list and dataset.")
}
print(paste("Number of rows in df_n: ", nrow(df_n)))  # Debugging step
# Ensure 'event_memory' and 'MEGA_Z' are in the dataset
if (!all(c("event_memory", "MEGA_Z", "Subject") %in% colnames(df_n))) {
stop("Required columns are missing in the filtered dataset.")
}
# Fit the logistic model
logistic_model = glmer(event_memory ~ MEGA_Z + (1 | Subject), family = binomial, data = df_n)
# Call logistic_analysis function to get ROC plot and Logistic plot
analysis = logistic_analysis(logistic_model, df_n)
return(list(ROC = analysis$ROC_Plot, Log = analysis$Logistic_Plot))
}
top3 = top_n(linear_model, df, 3)
top3
save_roc(top3)
logistic_analysis = function(model, data, outcome_var = "event_memory", predictor_var = "MEGA_Z", file_prefix = "Logistic_Analysis") {
# Generate predicted probabilities (fixed effects only and full prediction)
pred_prob_fixed = predict(model, type = "response", re.form = NA)  # Fixed effects only
pred_prob_full = predict(model, type = "response")  # Fixed + Random effects
# Convert event_memory to numeric (1 = "Yes", 0 = "No")
data[[outcome_var]] = ifelse(data[[outcome_var]] == "Yes", 1, 0)
# Check for missing values in response or predicted values
if (sum(is.na(data[[outcome_var]])) > 0) {
stop("Missing values in the response variable.")
}
if (sum(is.na(pred_prob_full)) > 0) {
stop("Missing values in predicted probabilities.")
}
# Compute and plot the ROC curve
roc_curve = roc(data[[outcome_var]], pred_prob_full)
# Check if ROC curve was successfully created
if (is.null(roc_curve)) {
stop("ROC curve could not be created.")
}
# Generate the plot
roc_plot = plot(roc_curve, main = "ROC Curve for Logistic Regression Model", col = "blue", lwd = 2)
# Calculate AUC value and add to the plot
auc_value = auc(roc_curve)
text(0.6, 0.2, paste("AUC =", round(auc_value, 3)), col = "red", cex = 1.5)
# Print AUC value to console
print(paste("AUC:", auc_value))
# Store predicted probabilities in the data frame
data$pred_prob_fixed = pred_prob_fixed
data$pred_prob_full = pred_prob_full
# Plot the logistic regression: Predicted probabilities vs predictor (e.g., MEGA_score)
log_plot = ggplot(data, aes_string(x = predictor_var)) +
geom_point(aes(y = pred_prob_full, color = as.factor(.data[[outcome_var]])), alpha = 0.7, size = 2) +
geom_line(aes(y = pred_prob_fixed), color = "blue", size = 1) +
labs(title = paste("Logistic Regression: Predicted Probability vs", predictor_var),
x = predictor_var, y = "Predicted Probability of Memory",
color = "Event Memory") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_color_manual(values = c("No" = "red", "Yes" = "green"))
# Return the plots
return(list(ROC_Plot = roc_plot, Logistic_Plot = log_plot))
}
save_roc = function(result) {
# Ensure the result contains valid ROC_Plot
if (is.null(result$ROC_Plot)) {
stop("No ROC plot available.")
}
# Get the name of the result for the file name
name = deparse(substitute(result))
# Save the plot
jpeg(paste0(name, "_ROC_curve.jpeg"), width = 10, height = 10, units = "in", res = 300)
print(result$ROC_Plot)  # Ensure the plot is printed
dev.off()  # Close the file device and save the plot
}
top3 = top_n(linear_model, df, 3)
save_roc(top3)
### helper functions for regressions ----
# for logistic regression:
logistic_analysis = function(model, data, outcome_var = "event_memory", predictor_var = "MEGA_Z", file_prefix = "Logistic_Analysis") {
# Generate predicted probabilities (fixed effects only and full prediction)
pred_prob_fixed = predict(model, type = "response", re.form = NA)  # Fixed effects only
pred_prob_full = predict(model, type = "response")  # Fixed + Random effects
# Compute and plot the ROC curve
roc_curve = roc(data[[outcome_var]], pred_prob_full)
roc_plot = plot(roc_curve, main = "ROC Curve for Logistic Regression Model", col = "blue", lwd = 2)
# Calculate AUC value and add to the plot
auc_value = auc(roc_curve)
text(0.6, 0.2, paste("AUC =", round(auc_value, 3)), col = "red", cex = 1.5)
# Print AUC value to console
print(paste("AUC:", auc_value))
# Store predicted probabilities in the data frame
data$pred_prob_fixed = pred_prob_fixed
data$pred_prob_full = pred_prob_full
# Plot the logistic regression: Predicted probabilities vs predictor (e.g., MEGA_score)
log_plot = ggplot(data, aes_string(x = predictor_var)) +
# Show the individual data points (raw data), colored by the actual event memory outcome (0 or 1)
geom_point(aes(y = pred_prob_full, color = as.factor(.data[[outcome_var]])), alpha = 0.7, size=2) +
# Plot the fixed effect line (general trend of predictor on predicted probability)
geom_line(aes(y = pred_prob_fixed), color = "blue", size = 1) +
labs(title = paste("Logistic Regression: Predicted Probability vs", predictor_var),
x = predictor_var, y = "Predicted Probability of Memory",
color = "Event Memory") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_color_manual(values = c("No" = "red", "Yes" = "green"))
# Return the plots
return(list(ROC_Plot = roc_plot, Logistic_Plot = log_plot))
}
save_roc = function(result) {
name = deparse(substitute(result))
roc_plot = result$ROC_Plot
jpeg(paste0(name, "_ROC_curve.jpeg"), width = 10, height = 10, units = "in", res = 300)
plot(roc_plot, main = paste0("ROC Curve for Logistic Regression Model: ", name), col = "blue", lwd = 2, xlim = c(0, 1), ylim = c(0, 1))
text(0.6, 0.2, paste("AUC =", round(auc(result$ROC_Plot), 3)), col = "red", cex = 1.5)
dev.off()
}
logistic_model = glmer(event_memory ~ MEGA_Z + (1|Subject), family = binomial, data = df)
log_result = logistic_analysis(logistic_model, df)
print(log_result$ROC_Plot)
print(log_result$Logistic_Plot)
# Save the ROC plot to a file
save_roc(log_result)
library(pROC)
library(lme4)
library(dplyr)
# set path
setwd('C:\\Users\\user\\Documents\\GitHub\\R_Course_2024\\final_project')
# Load the data from an RDS file
# df = readRDS("df.rds")
### helper functions for regressions ----
# for logistic regression:
logistic_analysis = function(model, data, outcome_var = "event_memory", predictor_var = "MEGA_Z", file_prefix = "Logistic_Analysis") {
# Generate predicted probabilities (fixed effects only and full prediction)
pred_prob_fixed = predict(model, type = "response", re.form = NA)  # Fixed effects only
pred_prob_full = predict(model, type = "response")  # Fixed + Random effects
# Compute and plot the ROC curve
roc_curve = roc(data[[outcome_var]], pred_prob_full)
roc_plot = plot(roc_curve, main = "ROC Curve for Logistic Regression Model", col = "blue", lwd = 2)
# Calculate AUC value and add to the plot
auc_value = auc(roc_curve)
text(0.6, 0.2, paste("AUC =", round(auc_value, 3)), col = "red", cex = 1.5)
# Print AUC value to console
print(paste("AUC:", auc_value))
# Store predicted probabilities in the data frame
data$pred_prob_fixed = pred_prob_fixed
data$pred_prob_full = pred_prob_full
# Plot the logistic regression: Predicted probabilities vs predictor (e.g., MEGA_score)
log_plot = ggplot(data, aes_string(x = predictor_var)) +
# Show the individual data points (raw data), colored by the actual event memory outcome (0 or 1)
geom_point(aes(y = pred_prob_full, color = as.factor(.data[[outcome_var]])), alpha = 0.7, size=2) +
# Plot the fixed effect line (general trend of predictor on predicted probability)
geom_line(aes(y = pred_prob_fixed), color = "blue", size = 1) +
labs(title = paste("Logistic Regression: Predicted Probability vs", predictor_var),
x = predictor_var, y = "Predicted Probability of Memory",
color = "Event Memory") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_color_manual(values = c("No" = "red", "Yes" = "green"))
# Return the plots
return(list(ROC_Plot = roc_plot, Logistic_Plot = log_plot))
}
save_roc = function(result) {
name = deparse(substitute(result))
roc_plot = result$ROC_Plot
jpeg(paste0(name, "_ROC_curve.jpeg"), width = 10, height = 10, units = "in", res = 300)
plot(roc_plot, main = paste0("ROC Curve for Logistic Regression Model: ", name), col = "blue", lwd = 2)
text(0.6, 0.2, paste("AUC =", round(auc(result$ROC_Plot), 3)), col = "red", cex = 1.5)
dev.off()
}
# Logistic regression model for memory by MEGA score
logistic_model = glmer(event_memory ~ MEGA_Z + (1|Subject), family = binomial, data = df)
log_result = logistic_analysis(logistic_model, df)
print(log_result$ROC_Plot)
print(log_result$Logistic_Plot)
# Save the ROC plot to a file
save_roc(log_result)
top_n = function(linear_model, df, num_features) {
result = feature_importance(linear_model)
top = feature_selection(result$coef, num_features)
n_movies = sub("Moviemov", "mov", top$Movie)
df_n = df[df$Movie %in% n_movies, ]
logistic_model = glmer(event_memory ~ MEGA_Z + (1 | Subject), family = binomial, data = df_n)
analysis = logistic_analysis(logistic_model, df_n)
return(df_n)
#list(ROC = analysis$ROC_Plot, Log = analysis$Logistic_Plot))
}
top3 = top_n(linear_model, df, 3)
top5 = top_n(linear_model, df, 5)
top10 = top_n(linear_model, df, 10)
# Save the plots to files
save_roc(top3)
top3$ROC
View(top3)
top_n = function(linear_model, df, num_features) {
result = feature_importance(linear_model)
top = feature_selection(result$coef, num_features)
n_movies = sub("Moviemov", "mov", top$Movie)
df_n = df[df$Movie %in% n_movies, ]
logistic_model = glmer(event_memory ~ MEGA_Z + (1 | Subject), family = binomial, data = df_n)
analysis = logistic_analysis(logistic_model, df_n)
return(list(ROC = analysis$ROC_Plot, Log = analysis$Logistic_Plot))
}
top3 = top_n(linear_model, df, 3)
save_roc(top3)
top3$ROC
print(top3$ROC)
plot(top3$ROC)
top_n = function(linear_model, df, num_features) {
result = feature_importance(linear_model)
top = feature_selection(result$coef, num_features)
n_movies = sub("Moviemov", "mov", top$Movie)
df_n = df[df$Movie %in% n_movies, ]
logistic_model = glmer(event_memory ~ MEGA_Z + (1 | Subject), family = binomial, data = df_n)
analysis = logistic_analysis(logistic_model, df_n)
return(list(ROC_Plot = analysis$ROC_Plot, Logistic_Plot = analysis$Logistic_Plot))
}
top3 = top_n(linear_model, df, 3)
top5 = top_n(linear_model, df, 5)
top10 = top_n(linear_model, df, 10)
# Save the plots to files
save_roc(top3)
# Save the plots to files
save_roc(top3)
ggsave("LogPlot_top3.jpeg", plot = top3$Logistic_Plot, width = 14, height = 10, dpi = 300)
save_roc(top5)
ggsave("LogPlot_top5.jpeg", plot = top5$Logistic_Plot, width = 14, height = 10, dpi = 300)
save_roc(top10)
ggsave("LogPlot_top10.jpeg", plot = top10$Logistic_Plot, width = 14, height = 10, dpi = 300)
save_roc = function(result) {
name = deparse(substitute(result))
roc_plot = result$ROC_Plot
jpeg(paste0("ROC_curve_",name,".jpeg"), width = 10, height = 10, units = "in", res = 300)
plot(roc_plot, main = paste0("ROC Curve for Logistic Regression Model: ", name), col = "blue", lwd = 2)
text(0.6, 0.2, paste("AUC =", round(auc(result$ROC_Plot), 3)), col = "red", cex = 1.5)
dev.off()
}
save_roc(top3)
