#add iq
iq = rnorm(N, 100, 15)
source("~/.active-rstudio-document", echo=TRUE)
head(df, 10)
source("~/.active-rstudio-document", echo=TRUE)
head(df, 10)
summary(df)
unique(df$gender)
colMeans(df$age)
colMeans(df)
colMeans(df$subject$age)
colMeans(df$subject, df$age)
df
df-df$gender
colMeans(df[, c(age,iq)])
colMeans(df[, c("age","iq")])
mean(df[1:10, "age"])
df[,"subject", "age", "iq"] |> filter(gender="female")
df["subject", "age"]
df["subject" "age"]
df[,"subject" "age"]
df |> filter("gender" = "female") |> arrange("age") |> select("subject", "age", "iq")
df |> filter("gender" = "female") |> arrange("age") |> select(subject, age, iq)
df |> filter(gender = "female") |> arrange("age") |> select(subject, age, iq)
install.packages("dplyr")
library(dplyr)
df |> filter(gender = "female") |> arrange("age") |> select(subject, age, iq)
df |> filter(gender == "female") |> arrange("age") |> select(subject, age, iq)
df |> filter(gender == "female") |> arrange(age) |> select(subject, age, iq)
colSums(df[,"iq"])
colSums(df[:,iq])
colSums(df[,iq])
colSums(df[iq])
cilMeans(df[,iq])
colMeans(df[,iq])
colMeans(df[,"iq"])
min(df$age)
mutate(df, "depression_new" = depression * 100)
df1 = mutate(df, "depression_new" = depression * 100)
summarise(df1,
count = n(),
min_age = min(df1$age),
max_age = max(df1$age),
depression_mean = mean(depression_new))
> df1 = mutate(df, "depression_new" = depression * 100)
df1 = mutate(df, "depression_new" = depression * 100)
summarize(df1, count = n(), min_age = min(age, na.rm=True), max_age = max(age, na.rm = True), "depression_avg" = mean(depression_new), group_by(gender))
summarize(df1, count = n(), min_age = min(age, na.rm=TRUE), max_age = max(age, na.rm = TRUE), "depression_avg" = mean(depression_new), group_by(gender))
summarize(df1, count = n(), min_age = min(age, na.rm=TRUE), max_age = max(age, na.rm = TRUE), "depression_avg" = mean(depression_new)) |> group_by(gender)
df1
df1 |> group_by(gender) |> filter(age > 18) |> summarize(df1, count = n(), min_age = min(age, na.rm=TRUE), max_age = max(age, na.rm = TRUE), "depression_avg" = mean(depression_new))
df |>
group_by(gender) |>
summarize(
count = n(),
mean_height = mean(height, na.rm = TRUE)
)
View(df1)
View(df1)
df1 |> group_by(gender) |> filter(age > 18) |> summarize( count = n(), min_age = min(age), max_age = max(age), avg_depression = mean(depression_new))
View(df)
print("size of df (rows, colomns):" dim(df))
print("size of df (rows, colomns):", dim(df))
print("size of df (rows, colomns):"+ dim(df))
print("hi " + 2)
print("min age is ", min(df$age))
min(df$age)
print("min age is " + min(df$age))
print(paste("size of df (rows, colomns):", dim(df)))
print(paste("the tables has", nrow(df), "rows and", ncol(df), "columns"))
print(paste("the table has", nrow(df), "rows and", ncol(df), "columns"))
print(paste("variable names:", names(df)))
print("variable names:"×ª paste(names(df))
print("variable names:", paste(names(df))
print("variable names:", paste(names(df)))
print("variable names:", paste(names(df)))
print(paste("variable names:", paste(names(df), collapse = ", ")))
print(paste("table size (rows, columns):", paste(dim(df))))
print(paste("table size (rows, columns):", paste(dim(df)))
print(paste("table size (rows, columns):", paste(dim(df))))
print(paste("table size (rows, columns):", paste(dim(df))))
print(paste("table size (rows, columns):", paste(dim(df), collapse = ", ")))
print(paste("mean iq:", paste(mean(iq, na.rm=TRUE))))
print(paste("median depression rate:", paste(median(df$depression)*100)))
median(df$depression)
print(paste("median depression rate:", paste(median(df$depression)*100, paste("%"))))
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
median(df$depression)
source("~/.active-rstudio-document", echo=TRUE)
df1 = mutate(df, depression = depression*100)
df1
df |> filter(age < 18) |> group_by(gender) |> summarize(
age = age,
iq = iq,
depression_rates = depression
)
df |> group_by(gender) |> filter(age < 18) |> summarize(
age = age,
iq = iq,
depression_rates = depression
)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
#summary for under 18
df |> group_by(gender) |> filter(age < 18) |> summarize(
mean_age = mean(age),
mean_iq = mean(iq),
depression_rates = mean(depression)
)
#summary for over 18
df |> group_by(gender) |> filter(age > 18) |> summarize(
mean_age = mean(age),
mean_iq = mean(iq),
depression_rates = mean(depression)
)
#summary for under 18
df |> group_by(gender) |> filter(age < 18) |> summarize(
age_range = (min(age), max(age),
#summary for under 18
df |> group_by(gender) |> filter(age < 18) |> summarize(
age_range = (min(age), max(age)),
print(paste("age range:", paste(min(age), paste("-"), paste(max(age)))))
source("C:/Users/user/OneDrive - mail.tau.ac.il/R/week2.R", echo=TRUE)
print(paste("age range:", paste(round(min(age),2)), paste("-"), paste(round(max(age),2))))
source("C:/Users/user/OneDrive - mail.tau.ac.il/R/week2.R", echo=TRUE)
source("C:/Users/user/OneDrive - mail.tau.ac.il/R/week2.R", echo=TRUE)
source("C:/Users/user/OneDrive - mail.tau.ac.il/R/week2.R", echo=TRUE)
library(dplyr)
library(readr)
library(tidyr)
setwd('C:\\Users\\user\\Documents\\Noam_Rcourse\\final_project')
### PREPROCESSING ----
# load the csv file into R
data = read_csv("data_MEGAproject.csv")
# add dummy for event memory
data = data |>
mutate(event_memory = ifelse(memorysource == 'event_memory', 1, 0),
Movie = gsub("mov([0-9])$", "mov0\\1", Movie),
MEGA_Z = scale(MEGA_score))
# count subjects and movies
subject_dict = unique(data$Subject)
movie_dict = sort(unique(data$Movie))
print(paste("the data contains", length((subject_dict)), "subjects and", length(movie_dict), "movies"))
# make new df of the relevant features only
df = data |> dplyr::select(Subject, Movie, MEGA_score, MEGA_Z, event_memory)
# factorizing event memory
df = df |>
mutate(event_memory = factor(df$event_memory, levels = c(0, 1), labels = c("No", "Yes")))
# Count the occurrences of 'Yes' and 'No' responses for each movie
movie_memory = df |>
group_by(Movie, event_memory) |>
summarise(count = n(), .groups = "drop") |>
pivot_wider(names_from = event_memory, values_from = count, values_fill = list(count = 0))
# Remove movies with 0 yes or 0 no
movie_memory_filtered = movie_memory |>
filter(Yes > 0 & No > 0)
# Join the filtered movie_memory with df to retain only movies with both Yes and No responses
df = df |>
filter(Movie %in% movie_memory_filtered$Movie)
# factorize movies, add event effect coding
df = df |>
mutate(Movie = factor(Movie),
event_effect = ifelse(event_memory ==  "Yes", 1, -1))
# create MEGA memory metric
df = df |>
mutate(MEGA_memory = MEGA_Z * event_effect)
# make dummy variable for each movie
dummy_dict = model.matrix(~ Movie - 1, data = df)
df = cbind(df, dummy_dict)
source("~/GitHub/R_Course_2024/final_project/analysis.R", echo=TRUE)
source("~/GitHub/R_Course_2024/final_project/RF_RFE.R", echo=TRUE)
regression ----
# linear regression for (MEGA_memory = MEGA Z score x event memory effect coding) by movie
# I first tried mixed model with random intercept for each subject
# but the sd was so small that I decided to switch back
linear_model = lm(MEGA_memory ~ Movie -1, data = df)
### linear regression ----
# linear regression for (MEGA_memory = MEGA Z score x event memory effect coding) by movie
# I first tried mixed model with random intercept for each subject
# but the sd was so small that I decided to switch back
linear_model = lm(MEGA_memory ~ Movie -1, data = df)
result = feature_importance(linear_model)
print(result$plot)
ggsave("feature_importance.jpeg", plot = result$plot, width = 12, height = 10, dpi = 300)
importance_df = data.frame(LR = result$coef$Movie[1:10], RFE = rfe_importance, RF = rf_movies[1:10])
result$coef$Movie[1:10]
rfe_importance
rfe_model$optVariables
rfe_model
# limit to first 8 to compare to rfe
importance_df = data.frame(LR = result$coef$Movie[1:8], RFE = rfe_importance, RF = rf_movies[1:8])
print(importance_df)
# Initialize empty vectors to store the indices
LR_indices <- numeric(nrow(importance_df))
RFE_indices <- numeric(nrow(importance_df))
RF_indices <- numeric(nrow(importance_df))
movie_id = importance_df$LR
# Loop over each row and check where the movie is in each column
for(i in 1:nrow(importance_df)) {
LR_indices[i] <- which(importance_df$LR == movie_id[i])
RFE_indices[i] <- which(importance_df$RFE == movie_id[i])
RF_indices[i] <- which(importance_df$RF == movie_id[i])
}
# Initialize empty vectors to store the indices
LR_indices <- numeric(nrow(importance_df))
RFE_indices <- numeric(nrow(importance_df))
RF_indices <- numeric(nrow(importance_df))
movie_id = importance_df$LR
# Loop over each row and check where the movie is in each column
for(i in 1:8) {
LR_indices[i] <- which(importance_df$LR == movie_id[i])
RFE_indices[i] <- which(importance_df$RFE == movie_id[i])
RF_indices[i] <- which(importance_df$RF == movie_id[i])
}
rfe_importance = rfe_model$optVariables
rfe_importance
# limit to first 8 to compare to rfe
importance_df = data.frame(LR = result$coef$Movie[1:8], RFE = rfe_importance, RF = rf_movies[1:8])
print(importance_df)
# Initialize empty vectors to store the indices
LR_indices <- numeric(nrow(importance_df))
RFE_indices <- numeric(nrow(importance_df))
RF_indices <- numeric(nrow(importance_df))
movie_id = importance_df$LR
# limit to first 8 to compare to rfe
importance_df = data.frame(LR = result$coef$Movie, RF = rf_movies)
print(importance_df)
# Initialize empty vectors to store the indices
LR_indices <- numeric(nrow(importance_df))
RF_indices <- numeric(nrow(importance_df))
movie_id = importance_df$LR
# Loop over each row and check where the movie is in each column
for(i in 1:nrow(importance_df)) {
LR_indices[i] <- which(importance_df$LR == movie_id[i])
RF_indices[i] <- which(importance_df$RF == movie_id[i])
}
indices_df <- data.frame(
Movie_ID = movie_id,
LR_index = LR_indices,
RF_index = RF_indices
)
# View the new dataframe with indices
print(indices_df)
# Create a long-format dataframe
indices_df_long = indices_df |>
pivot_longer(cols = c(LR_index, RF_index),
names_to = "Model",
values_to = "Rank")
# Create plot
method_plot = ggplot(indices_df_long, aes(x = Model, y = Rank, color = Movie_ID, group = Movie_ID)) +
geom_point(size = 3) +  # Points for each movie
geom_line(color = "gray", alpha = 0.5) +  # Lines connecting the points for each movie
labs(title = "Movie Ranking Across Models (LR, RFE, RF)",
x = "Model",
y = "Rank") +
scale_y_reverse() +  # Flip the y-axis so that top-ranked movies are at the top
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for clarity
ggsave("method_comparison.jpeg", plot = method_plot, width = 12, height = 10, dpi = 300)
print(method_plot)
# limit to first 8 to compare to rfe
importance_df = data.frame(LR = result$coef$Movie, RF = rf_movies)
print(importance_df)
# Initialize empty vectors to store the indices
LR_indices <- numeric(nrow(importance_df))
RF_indices <- numeric(nrow(importance_df))
movie_id = importance_df$LR
# Loop over each row and check where the movie is in each column
for(i in 1:nrow(importance_df)) {
LR_indices[i] <- which(importance_df$LR == movie_id[i])
RF_indices[i] <- which(importance_df$RF == movie_id[i])
}
indices_df <- data.frame(
Movie_ID = movie_id,
LR = LR_indices,
RF = RF_indices
)
# View the new dataframe with indices
print(indices_df)
# Create a long-format dataframe
indices_df_long = indices_df |>
pivot_longer(cols = c(LR, RF),
names_to = "Model",
values_to = "Rank")
# Create plot
method_plot = ggplot(indices_df_long, aes(x = Model, y = Rank, color = Movie_ID, group = Movie_ID)) +
geom_point(size = 3) +  # Points for each movie
geom_line(color = "gray", alpha = 0.5) +  # Lines connecting the points for each movie
labs(title = "Movie Ranking Across Models (LR, RFE, RF)",
x = "Model",
y = "Rank") +
scale_y_reverse() +  # Flip the y-axis so that top-ranked movies are at the top
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for clarity
print(method_plot)
# Create plot
method_plot = ggplot(indices_df_long, aes(x = Model, y = Rank, color = Movie_ID, group = Movie_ID)) +
geom_point(size = 3) +  # Points for each movie
geom_line(color = "gray", alpha = 0.5) +  # Lines connecting the points for each movie
labs(title = "Movie Ranking Across Models (LR, RF)",
x = "Model",
y = "Rank") +
scale_y_reverse() +  # Flip the y-axis so that top-ranked movies are at the top
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for clarity
print(method_plot)
ggsave("method_comparison.jpeg", plot = method_plot, width = 12, height = 10, dpi = 300)
